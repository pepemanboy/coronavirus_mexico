{"version":3,"sources":["App.js","index.js"],"names":["App","start_date","Date","useState","labels","datasets","plotData","setPlotData","getData","url","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","rows","data","mexico","find","val","idx","mexico_data","key","match","date","date_str","getDate","getMonth","push","parseInt","getAllData","confirmed_data","deaths_data","recovered_data","label","fill","borderColor","useEffect","className","Container","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQA0FeA,MAlFf,WACE,IAAMC,EAAa,IAAIC,KAAK,aADf,EAOmBC,mBAAS,CAACC,OAAO,GAAIC,SAAU,KAPlD,mBAONC,EAPM,KAOIC,EAPJ,KASPC,EAAO,uCAAG,WAAOC,GAAP,qCAAAC,EAAA,sEACSC,MAAMF,GADf,cACRG,EADQ,OAERC,EAASD,EAASE,KAAKC,YAFf,SAGOF,EAAOG,OAHd,OAGRC,EAHQ,OAIRC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAC5BC,EAAUC,IAAKC,MAAML,EAAK,CAACM,QAAQ,IACnCC,EAAOJ,EAAQK,KACfC,EAASF,EAAKG,MAAK,SAACC,EAAKC,GAAS,MAAiC,WAA1BD,EAAI,qBAC7CE,EAAc,CAAC7B,OAAO,GAAIwB,KAAM,IATxB,OAAAlB,EAAA,KAUImB,GAVJ,oDAUHK,EAVG,YAWJC,MAAM,mBAXF,uBAYJC,EAAO,IAAIlC,KAAKgC,IACXjC,GAbD,wDAcJoC,EAAWD,EAAKE,UAAY,KAAQF,EAAKG,WAAa,GAC5DN,EAAY7B,OAAOoC,KAAKH,GACxBJ,EAAYL,KAAKY,KAAKC,SAASZ,EAAOK,KAhB5B,yDAmBPD,GAnBO,4CAAH,sDAsBPS,EAAU,uCAAG,oCAAAhC,EAAA,sEACYF,EA7BT,0JA4BH,cACXmC,EADW,gBAESnC,EA7BT,uJA2BA,cAEXoC,EAFW,gBAGYpC,EA7BT,0JA0BH,OAGXqC,EAHW,OAKXzC,EAASuC,EAAevC,OAExBwB,EAAO,CACXxB,OAAQA,EACRC,SAAU,CACR,CACEyC,MAAO,oBACPC,MAAM,EACNC,YAAa,UACbpB,KAAMe,EAAef,MAEvB,CACEkB,MAAO,cACPC,MAAM,EACNC,YAAa,UACbpB,KAAMiB,EAAejB,MAEvB,CACEkB,MAAO,UACPC,MAAM,EACNC,YAAa,UACbpB,KAAMgB,EAAYhB,QAIxBrB,EAAYqB,GA9BK,4CAAH,qDAqChB,OAJAqB,qBAAU,WACRP,OAIA,yBAAKQ,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,wBAAID,UAAU,SAAd,4BACA,kBAAC,IAAD,CAAMtB,KAAMtB,IACZ,yBAAK4C,UAAU,UACb,qFAAuD,uBAAGE,KAAK,8CAAR,wDAAvD,KACA,4DAA8B,uBAAGC,OAAO,SAASC,IAAI,sBAAsBF,KAAK,gEAAlD,UAA9B,SC/EVG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.f275fc14.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Papa from 'papaparse'\nimport {Line} from 'react-chartjs-2';\nimport Container from 'react-bootstrap/Container'\nimport './App.css'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const start_date = new Date(\"2/26/2020\");\n\n  const confirmed_url = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\"\n  const deaths_url = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\";\n  const recovered_url = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv\";\n\n  const [plotData, setPlotData] = useState({labels:[], datasets: []});\n\n  const getData = async (url) => {\n    const response = await fetch(url);\n    const reader = response.body.getReader();\n    const result = await reader.read();\n    const decoder = new TextDecoder('utf-8');\n    const csv = decoder.decode(result.value);\n    const results = Papa.parse(csv, {header: true});\n    const rows = results.data;\n    const mexico = rows.find((val, idx) => {return val[\"Country/Region\"] === \"Mexico\"})\n    const mexico_data = {labels:[], data: []};\n    for (const key in mexico) {\n      if (key.match(/\\d*\\/\\d*\\/\\d*/ig)) {\n        const date = new Date(key);\n        if (date < start_date) continue;\n        const date_str = date.getDate() + \"/\" +  (date.getMonth() + 1);\n        mexico_data.labels.push(date_str);\n        mexico_data.data.push(parseInt(mexico[key]));\n      }\n    }\n    return mexico_data;\n  }\n\n  const getAllData = async () => {\n    const confirmed_data = await getData(confirmed_url);\n    const deaths_data = await getData(deaths_url);\n    const recovered_data = await getData(recovered_url);\n\n    const labels = confirmed_data.labels;\n\n    const data = {\n      labels: labels,\n      datasets: [\n        {\n          label: 'Casos confirmados',\n          fill: false,\n          borderColor: '#48BEFF',\n          data: confirmed_data.data,\n        },\n        {\n          label: 'Recuperados',\n          fill: false,\n          borderColor: '#43C59E',\n          data: recovered_data.data,\n        },\n        {\n          label: 'Muertes',\n          fill: false,\n          borderColor: '#14453D',\n          data: deaths_data.data,\n        },\n      ]\n    };\n    setPlotData(data);\n  }\n\n  useEffect(()=> {\n    getAllData();\n  });\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <h1 className=\"title\">Coronavirus en México</h1>\n        <Line data={plotData}/>\n        <div className=\"footer\">\n          <p>Actualizado automáticamente cada 24 horas gracias a <a href=\"https://github.com/CSSEGISandData/COVID-19\">Johns Hopkins University Coronavirus Resource Center</a>.</p>\n          <p>Open source. Conoce más en <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/pepemanboy/coronavirus_mexico/tree/master\">Github</a>.</p>\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}